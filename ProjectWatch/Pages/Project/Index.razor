@page "/project/index"

@using ProjectWatch.Data
@using ProjectWatch.Models
@inject ProjectService ProjectService
@inject IElementService<Element> ElementService



@if (project == null)
{
    <h1>Project</h1>
    <p><em>Loading...</em></p>
}
else
{
    <h1>@project.Name</h1>
    @foreach (var e in project.Elements)
    {
        <div class="row">
            <ElementView Element="@e">
            </ElementView>
            <input type="button" @onclick="@(() => { ElementService.Delete(e,project); })" value="-" />
        </div>
    }
    <input type="button" @onclick="@(() => { ElementService.Create(project); })" value="@("+")" />
}




@code {
    private Project project;

    protected override async Task OnInitializedAsync()
    {
        project = await ProjectService.GetProjectAsync();
    }


    RenderFragment DrawElement(Element e)
    {
        ElementView _myElement = null;
        return new RenderFragment(builder =>
        {
            builder.OpenComponent<ElementView>(0);
            builder.AddComponentReferenceCapture(1, inst => { _myElement = (ElementView)inst; _myElement.Element = e;});
            builder.CloseComponent();
        });
    }
}
